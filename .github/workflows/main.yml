name: Check-Lint-plan-apply

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch, and only when TF or TFVARS files are involved
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
        
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      runapply:
        description: 'Enter yes or no if apply should be run'
        required: true
        default: 'No'        

jobs:
  prebuildcheck:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    #defaults:
    #  run:
    #   working-directory: ./run-modules/create-gke/  #${{ env.tf_actions_working_dir }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      #
      # Sequence:  Setup Ations -> Terraform init -> Terraform validate, Terraform format -> Terraform lint ->Plan/deploy
      #
      
      # Terraform init
      
      # prepares Terraform token, to be able to donnect to TFC and download the Terraform modules specified in main-gke.tf source tag
      - name: Setup TF token
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
        run: |
          cat << EOF > ./run-modules/create-gke/.terraformrc
          {
             "credentials": {
               "app.terraform.io": {
                 "token": "$TFE_TOKEN"
                }
              }
          }
          EOF
          
      - run: cat ./run-modules/create-gke/.terraformrc
      
        # Runs Terraform init
      - name: Run a Terraform init on /modules/gke
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}       
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init
          
        # Terraform validate: Runs terraform validate
      - name: Run a Terraform validate on /modules/gke
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ validate
  
      # Terraform format
      - name: Run Terraform format on /modules/gke
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ fmt
      
      # Linting of TF code
     
        # Runs a container from ghcr.io, version v0.33.1
      - name: Check linting of Terraform files for GKE
        uses: terraform-linters/tflint-bundle@v0.33.1
        # here are some options: loglevel to provide visibility, disable 1 TFLint default rule that was giving us Warning, and manually specify the location in the repo for TF files
        with:
          args: --ignore-module=SOURCE --loglevel=info --disable-rule=terraform_deprecated_interpolation ./run-modules/create-gke/
     
      # Linting of TF code
      #- name: Setup Terraform
      #  uses: hashicorp/setup-terraform@v1
      #  with:
      #    cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
      #- name: Terraform Format
      #  id: fmt
      #  run: terraform fmt
      #- name: Lint Terraform
      #  uses: actionshub/terraform-lint@main
      #  with:
      #    args: --loglevel=info --module --disable-rule=terraform_deprecated_interpolation ./run-modules/create-gke/

  terraform_plan:
  #if prebuildcheck passes, do TF plan
   runs-on: ubuntu-latest
   needs: prebuildcheck
   steps:
      # Checks-out repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      
      # prepares Terraform token, to be able to donnect to TFC and download the Terraform modules specified in main-gke.tf source tag
      - name: Setup TF_token
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
        run: |
          cat << EOF > ./run-modules/create-gke/.terraformrc
          {
             "credentials": {
               "app.terraform.io": {
                 "token": "$TFE_TOKEN"
                }
              }
          }
          EOF
          
      - name: Run Terraform init on /modules/gke
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init

      - name: Run a Terraform plan on /modules/gke
        id: plan
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ plan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform_apply:
  #if terraform_plan passes, do TF apply
   needs: terraform_plan
   name: deploygke 
   runs-on: ubuntu-latest
      
   #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
   #if: github.event_name != 'pull_request' && github.event_name == 'push' && (contains(toJson(github.event.commits), '*DEV*') == true || contains(toJson(github.event.commits), '[skip prod]') == true)
   if: (${{ github.event.inputs.runapply =='yes' }})  || (github.event.review.state == 'approved' && contains(github.event.pull_request.labels.*.name, 'prod'))

   steps:
      # Checks-out repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
        
      # prepares Terraform token, to be able to donnect to TFC and download the Terraform modules specified in main-gke.tf source tag
      - name: Setup TF_token
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
        run: |
          cat << EOF > ./run-modules/create-gke/.terraformrc
          {
             "credentials": {
               "app.terraform.io": {
                 "token": "$TFE_TOKEN"
                }
              }
          }
          EOF
          
      - name: Run Terraform init on /modules/gke
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init

      - name: Run a Terraform apply on /modules/gke
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ apply -auto-approve
          
